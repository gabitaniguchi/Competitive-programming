#include <bits/stdc++.h>

using namespace std;

#define MAX (int)(2e5 + 10)

int n, dp[MAX], a[MAX], t[MAX], seg[4*MAX], ans=0;

void build(int node, int l, int r){
    if(l==r){
        seg[node] = t[l];
        return;
    }

    int mid = (l+r)/2;

    build(2*node, l, mid);
    build(2*node+1, mid+1, r);
}

void update(int node, int l, int r, int index, int x){
    if(l==r){
        seg[node] = x;
        return;
    }

    int mid = (l+r)/2;

    if(l<=index && index<=mid) update(2*node, l, mid, index, x);
    else update(2*node+1, mid+1, r, index, x);
}

int query (int node, int tl, int tr, int l, int r){
    if(r<tl || l>tr) return 0;
    if(l<=tl && r>=tr) return seg[node];

    int mid = (tl+tr)/2;
    return max(query(2*node, tl, mid, l, r), query(2*node+1, mid+1, tr, l, r));
}

int main(){

    cin>>n;

    build(1, 1, n);

    for(int i=1; i<=n; i++){
        cin>>a[i];
        dp[i] = query(1, 1, n, 1, a[i]-1) + 1;
        update(1, 1, n, a[i], dp[i]);
        cout<<i<<endl;
        for(int i=1; i<=32; i++) cout<<seg[i]<<" ";
        cout<<endl;
        ans = max(ans, dp[i]);
    }

    cout<<ans<<endl;

    return 0;
}
